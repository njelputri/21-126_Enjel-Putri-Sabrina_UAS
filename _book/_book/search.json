[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Quarto CRC Book",
    "section": "",
    "text": "Preface\nThis is a Quarto book."
  },
  {
    "objectID": "index.html#software-conventions",
    "href": "index.html#software-conventions",
    "title": "Quarto CRC Book",
    "section": "Software conventions",
    "text": "Software conventions\n\n1 + 1\n\n2\n\n\nTo learn more about Quarto books visit https://quarto.org/docs/books."
  },
  {
    "objectID": "index.html#acknowledgments",
    "href": "index.html#acknowledgments",
    "title": "Quarto CRC Book",
    "section": "Acknowledgments",
    "text": "Acknowledgments\nBlah, blah, blah…"
  },
  {
    "objectID": "baru.html#bussiness-understanding",
    "href": "baru.html#bussiness-understanding",
    "title": "1  TUGAS KLASIFIKASI DATA PROYEK SAINS DATA",
    "section": "1.1 – BUSSINESS UNDERSTANDING –",
    "text": "1.1 – BUSSINESS UNDERSTANDING –\nIdentifikasi kasus :\nLiver merupakan salah satu penyakit kronis yang paling umum di Timur Laut Andhra Pradesh, India. Kematian akibat liver ini terus meningkat, seiring dengan meningkatnya angka konsumsi alkohol, infeksi hepatitis kronis, dan penyakit hati terkait obesitas\nTujuan :\nMembangun model klasifikasi liver sebagai upaya deteksi terhadap penyakit liver dengan menggunakan model Random Forest. Dengan melakukan analisa pada data liver, model ini dapat membangun prediksi yang akurat sehingga memungkinkan tenaga kesehatan untuk mengidentifikasi pasien liver."
  },
  {
    "objectID": "baru.html#data-understanding",
    "href": "baru.html#data-understanding",
    "title": "1  TUGAS KLASIFIKASI DATA PROYEK SAINS DATA",
    "section": "1.2 – DATA UNDERSTANDING –",
    "text": "1.2 – DATA UNDERSTANDING –\nTahapan Pada Data Understanding merupakan tahapan dimana kita perlu memahami data yang akan diolah. Adapun hal - hal yang perlu dilakukan nantinya untuk memahami dataset ini, yakni\n\nTentang data, mencakup :\n\nPengumpulan dataset\nPengenalan singkat mengenai data yang akan diolah\n\nMendeskripsikan data, mencakup :\n\nanalisa tipe data\ndeskripsi fitur\n\nEksplorasi data, mencakup :\n\nVisualisasi data\n\nIdentifikasi kualitas data :\n\nIdentifikasi missing value setiap fitur atau kolom\nIdentifikasi data duplikat\nIdentifikasi outlier (data aneh)\nIdentifikasi jumlah data (proporsi data perkelas yang digunakan untuk mengetahui balancing dataset atau keseimbangan data per kelas)\n\n\n\n1.2.1 1. Tentang Data\n\n\n1.2.2 - Teknik Pengumpulan Data\nDalam proyek ini menggunakan kumpulan data yang tersedia di kaggle yang berupa csv. Fitur-fitur yang ada berupa catatan pasien liver dan pasien non liver yang dikumpulkan dari India dengan jumlah dataset sebanya 583 data.\n\nimport pandas as pd\n\ndata = pd.read_csv('dataset.csv')\ndata.head(5)\n\n\n\n\n\n\n\n\nSelector\nAge\nGender\nTB\nDB\nAlkphos\nSgpt\nSgot\nTP\nALB\nA/G Ratio\n\n\n\n\n0\n1\n65\nFemale\n0.7\n0.1\n187.0\n16.0\n18.0\n6.8\n3.3\n0.9\n\n\n1\n1\n62\nMale\n10.9\n5.5\n699.0\n64.0\n100.0\n7.5\n3.2\n0.7\n\n\n2\n1\n62\nMale\n7.3\n4.1\n490.0\n60.0\n68.0\n7.0\n3.3\n0.9\n\n\n3\n1\n58\nMale\n1.0\n0.4\n182.0\n14.0\n20.0\n6.8\n3.4\n1.0\n\n\n4\n1\n72\nMale\n3.9\n2.0\n195.0\n27.0\n59.0\n7.3\n2.4\n0.4\n\n\n\n\n\n\n\n\n# rincian dataset (jumlah data dan kolom)\n\nprint(\"Jumlah data : \", data.shape[0])\nprint(\"Jumlah kolom : \", data.shape[1])\n\nJumlah data :  583\nJumlah kolom :  11\n\n\nDataset ini sebanyak 583 data dengan rincian pelabelan sebagai berikut ini :\n\nPasien liver (1) = 416 data\nPasien Nonliver (2) = 167 data Perbedaan yang signifikan pada jumlah data antar label sehingga perlu diseimbangkan terlebih dahulu\n\nUntuk mendeteksi penyakit liver di India, dapat dilihat dari ciri-ciri sebagai berikut :\n\nAge: Mewakili usia pasien, mengindikasikan faktor demografis yang mungkin relevan dengan kesehatan hati.\nGender: Menunjukkan jenis kelamin pasien, memberikan informasi tentang distribusi penyakit hati antar jenis kelamin.\nTB (Total Bilirubin): Mengukur total bilirubin dalam darah, yang dapat menjadi indikator fungsi dan kesehatan hati. Bilirubin merupakan pigmen kuning yang dihasilkan sebagai hasil pemecahan hemoglobin dari sel darah merah yang tua di hati.\nDB (Direct Bilirubin): Secara khusus mengukur bilirubin langsung atau tidak terkonjugasi, memberikan informasi lebih rinci tentang tingkat bilirubin terkait dengan kesehatan hati.\nAlkphos (Alkaline Phosphatase): Mengukur level alkaline phosphatase, enzim yang dapat terkait dengan kesehatan hati dan tulang. Tingkat yang meningkat dapat menunjukkan masalah hati.\nSGPT (Alamine Aminotransferase): Mengukur level SGPT, sebuah enzim yang dapat menunjukkan kerusakan atau peradangan pada hati. Tingkat SGPT yang tinggi dalam tes darah dapat menjadi indikasi kerusakan hati, seperti hepatitis atau kerusakan hati akibat alkohol atau obat-obatan.\nSGOT (Aspartate Aminotransferase): Mengukur level SGOT, enzim yang terdapat di berbagai jaringan, dengan level yang tinggi mungkin mengindikasikan masalah pada hati atau jantung.\nTP (Total Protein): Menunjukkan total protein dalam darah, yang dapat terkait dengan fungsi hati dan kesehatan secara umum.\nAlb (Albumin): Mengukur tingkat albumin dalam darah, protein penting yang diproduksi oleh hati, dan dapat menjadi indikator fungsi hati. Penurunan kadar albumin dalam darah dapat terjadi pada pasien dengan penyakit hati yang merusak kemampuan hati untuk memproduksi protein ini.\nA/G Ratio (Rasio Albumin/Globulin): Mewakili rasio albumin terhadap globulin dalam darah, memberikan wawasan tentang fungsi hati dan ginjal.\nSelector: kolom yang digunakan untuk pelabelan diagnosa liver dan non liver\n\n\n\n1.2.3 2. Mendeskripsikan Data\n\ndata.columns\n\nIndex(['Selector', 'Age', 'Gender', 'TB', 'DB', 'Alkphos', 'Sgpt', 'Sgot',\n       'TP', 'ALB', 'A/G Ratio'],\n      dtype='object')\n\n\n\n\n1.2.4 - Analisa Tipe Data\nDalam analisa data ini, terdapat tipe data yang ditemukan yaitu tipe data nominal.\n\nTipe nominal\n\nmemiliki value 1 yang melambangkan ya dan 0 yang melambangkan tidak. &gt; Pada data ini mencakup fitur ‘Selector’\nmemiliki value perempuan dan laki laki. &gt; yakni pada fitur ‘Gender’\nmencakup tipe data numeric. &gt; yakni pada fitur ‘Age’, ‘TB’, ‘DB’, ‘Alkphos’, ‘SGPT’, ‘SGOT’, ‘TP’, ‘ALB’, ‘A/G Ratio’\n\n\n\n\n1.2.5 - Deskripsi Fitur\nTerdapat beberap fitur yang ada pada dataset ini yaitu sebagai berikut:\n\nAge: Mewakili usia pasien, mengindikasikan faktor demografis yang mungkin relevan dengan kesehatan hati.\nGender: Menunjukkan jenis kelamin pasien, memberikan informasi tentang distribusi penyakit hati antar jenis kelamin.\nTB (Total Bilirubin): Mengukur total bilirubin dalam darah, yang dapat menjadi indikator fungsi dan kesehatan hati.Bilirubin merupakan pigmen kuning yang dihasilkan sebagai hasil pemecahan hemoglobin dari sel darah merah yang tua di hati.\nDB (Direct Bilirubin): Secara khusus mengukur bilirubin langsung atau tidak terkonjugasi, memberikan informasi lebih rinci tentang tingkat bilirubin terkait dengan kesehatan hati.\nAlkphos (Alkaline Phosphatase): Mengukur level alkaline phosphatase, enzim yang dapat terkait dengan kesehatan hati dan tulang. Tingkat yang meningkat dapat menunjukkan masalah hati.\nSGPT (Alamine Aminotransferase): Mengukur level SGPT, sebuah enzim yang dapat menunjukkan kerusakan atau peradangan pada hati. Tingkat SGPT yang tinggi dalam tes darah dapat menjadi indikasi kerusakan hati, seperti hepatitis atau kerusakan hati akibat alkohol atau obat-obatan.\nSGOT (Aspartate Aminotransferase): Mengukur level SGOT, enzim yang terdapat di berbagai jaringan, dengan level yang tinggi mungkin mengindikasikan masalah pada hati atau jantung.\nTP (Total Protein): Menunjukkan total protein dalam darah, yang dapat terkait dengan fungsi hati dan kesehatan secara umum.\nAlb (Albumin): Mengukur tingkat albumin dalam darah, protein penting yang diproduksi oleh hati, dan dapat menjadi indikator fungsi hati. Penurunan kadar albumin dalam darah dapat terjadi pada pasien dengan penyakit hati yang merusak kemampuan hati untuk memproduksi protein ini.\nA/G Ratio (Rasio Albumin/Globulin): Mewakili rasio albumin terhadap globulin dalam darah, memberikan wawasan tentang fungsi hati dan ginjal.\nSelector: kolom yang digunakan untuk pelabelan diagnosa liver dan non liver.\n\n\n1: Liver\n2: NonLiver\n\n\n\n1.2.6 3. Eksplorasi Data\n\n\n1.2.7 - Visualisasi Data\nVisualisasi data dilakukan untuk memudahkan dalam memahami data dengan memperoleh informasi sebaran nilai dari dataset.\n\nimport matplotlib.pyplot as plt\n\ndata.hist(figsize=(15,15))\nplt.show\n\n&lt;function matplotlib.pyplot.show(close=None, block=None)&gt;\n\n\n\n\n\n\n\n1.2.8 4. Identifikasi Kualitas Data\n\n\n1.2.9 - Identifikasi Missing value\nMissing value yaitu hilangnya satu atau beberapa data dalam suatu atribut. Penyebab dari adanya missing value yaitu kesalahan pada saat memasukkan data, variabel yang tidak relevan, dan ketidakmampuan merekam informasi, serta penghapusan.\nPenanganan Missing value : Jika atribut tersebut memiliki banyak missing value, maka atribut tersebut perlu dihapus dari dataset. Namun jika hanya terdapat beberapa data yang missing value bisa dilakukan drop dari baris yang memiliki missing value atau mengisinya dengan rata-rata nilai pada atribut yang bersangkutan.\nContoh adanya missing value:\n\n\n\n\nfitur1\n\n\nfitur2\n\n\n\n\n\n\n22\n\n\n\n\n\n\n20\n\n\n\n\n4\n\n\n14\n\n\n\n\n\n\n5\n\n\n\n\n\n\n1\n\n\n\n\nDari tabel di atas, fitur 1 memiliki banyak sekali missing value sehingga atribut fitur 1 perlu dihilangkan.\nUntuk mengidentifikasi ada tidaknya missing value, menggunakan fungsi isna( ) yang digunakan untuk mengidentifikasi apakah setiap fitur dalam dataset memiliki nilai yang hilang (NaN atau NULL). Selain itu, juga menggunakan fungsi any( ) yang digunakan untuk menentukan apakah ada setidaknya satu nilai yang hilang dalam setiap fitur.\n\n# menghitung apakah ada nilai yang hilang dalam setiap kolom\nmissing_values = data.isna().any()\n\n# menampilkan hasil\nprint(\"Apakah ada nilai yang hilang dalam setiap kolom:\")\nprint(missing_values)\n\nApakah ada nilai yang hilang dalam setiap kolom:\nSelector     False\nAge          False\nGender       False\nTB           False\nDB           False\nAlkphos      False\nSgpt         False\nSgot         False\nTP           False\nALB          False\nA/G Ratio     True\ndtype: bool\n\n\nNote : terdapat missing value pada fitur A/G Ratio\nJumlah missing value pada data\n\nmissing_values = data.isnull().sum()\nprint(\"Jumlah Missing Values dalam Setiap Kolom:\")\nprint(missing_values)\n\nJumlah Missing Values dalam Setiap Kolom:\nSelector     0\nAge          0\nGender       0\nTB           0\nDB           0\nAlkphos      0\nSgpt         0\nSgot         0\nTP           0\nALB          0\nA/G Ratio    4\ndtype: int64\n\n\n\n\n1.2.10 - Identifikasi Duplikat data\nUntuk mengidentifikasi baris-baris dalam dataset yang merupakan duplikat dari baris-baris sebelumnya yaitu dengan menggunakan fungsi dupicate( )\n\njumlah_duplikat = data.duplicated().sum()\n\n# menampilkan jumlah data yang duplikat\nprint(\"Jumlah data yang duplikat:\", jumlah_duplikat)\n\nJumlah data yang duplikat: 13\n\n\nNote : terdapat beberapa baris data yang sama, sehingga data tersebut harus dihilangkan untuk menghindari adanya data yang redundan\n\n\n1.2.11 - Identifikasi Outlier\nOutlier merupakan nilai yang signifikan atau ekstrem yang berbeda secara signifikan dari sebagian besar dalam satu dataset.\nContoh :\n\n\n\n\nNama\n\n\nNilai Ujian\n\n\n\n\nsiswa 1\n\n\n79\n\n\n\n\nsiswa 2\n\n\n9000\n\n\n\n\nsiswa 3\n\n\n87\n\n\n\nsiswa 4\n\n\n78\n\n\n\nsiswa 5\n\n\n84\n\n\n\n\nDari data tersebut ditemukan satu outlier yakni pada data siswa 2 yang mana, nilai 9000 merupakan contoh outlier karena nilainya jauh lebih besar daripada nilai-nilai ujian lainnya.\nUntuk mengidentifikasi outlier dengan mengimport kelas LocalOutlierfactor yang menyediakan implementasi algoritma LOF untuk deteksi outlier.Pada model LOF menggunakan parameter n_neighbors yaitu jumlah tetangga yang akan digunakan dalam perhitungan LOF. Pada model LOF menggunakan fungsi fit_predict yang digunakan untuk menilai apakah setiap baris dalam dataset merupakan outlier atau bukan, hasilnya yaitu dengan nilai -1 untuk outlier dan 1 untuk data yang bukan outlier.\n\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import LocalOutlierFactor\nimport numpy as np\nimport pandas as pd\n\n\n# Membagi data menjadi numerik dan kategorikal\nnumerical_cols = data.select_dtypes(include=['int', 'float']).columns\ncategorical_cols = data.select_dtypes(include='object').columns\n\n# Menggunakan SimpleImputer untuk mengisi nilai yang hilang dengan mean (dapat disesuaikan)\nimputer = SimpleImputer(strategy='mean')\ndata[numerical_cols] = imputer.fit_transform(data[numerical_cols])\n\n# Label Encoding untuk kolom kategorikal\nfrom sklearn.preprocessing import LabelEncoder\n\nlabel_encoder = LabelEncoder()\ndata[categorical_cols] = data[categorical_cols].apply(lambda col: label_encoder.fit_transform(col))\n\n# Menggabungkan kolom numerik dan kategorikal\nselected_data = data[numerical_cols.union(categorical_cols)]\n\n# Normalisasi data numerik\nscaler = StandardScaler()\nselected_data[numerical_cols] = scaler.fit_transform(selected_data[numerical_cols])\n\n# Membuat model LOF\nclf = LocalOutlierFactor(n_neighbors=20)  # Jumlah tetangga yang digunakan\noutlier_scores = clf.fit_predict(selected_data)\n\n# Menampilkan indeks outlier\noutlier_indices = np.where(outlier_scores == -1)[0]\nprint(\"Jumlah outlier:\", len(outlier_indices))\n\nJumlah outlier: 38\n\n\nNote : terdapat data yang memiliki outlier, sehingga data tersebut harus dihilangkan\n\n\n1.2.12 - Identifikasi Jumlah Data\nDengan mengidentifikasi jumlah data, dapat mengetahui seberapa berbeda pada jumlah data di tiap-tiap label. Jika jumlah data antar label memiliki perbedaan yang sangat jauh maka akan mempengaruhi akurasi dan hasil klasifikasi sehingga perlu dilakukan penyeimbangan jumlah data di tiap labelnya.\n\n# menghitung jumlah target pada data tanpa outlier\ntiap_label = data['Selector'].value_counts()\n\nprint(\"Jumlah data pada tiap target :\")\nprint(tiap_label)\n\nJumlah data pada tiap target :\nSelector\n1.0    416\n2.0    167\nName: count, dtype: int64\n\n\nNote : terjadi ketimpangan data yang signifikan sehingga dilakukan balancing data agar proporsi data tidak condong pada satu kelas saja.\nHasil Analisa Pada Data Understanding :\n\nData memiliki missing values\nData memiliki 13 data duplikat atau redundan\nData memiliki 1 outlier\nPerbandingan proporsi data tiap target sangat jauh"
  },
  {
    "objectID": "baru.html#data-preprocessing",
    "href": "baru.html#data-preprocessing",
    "title": "1  TUGAS KLASIFIKASI DATA PROYEK SAINS DATA",
    "section": "1.3 – DATA PREPROCESSING –",
    "text": "1.3 – DATA PREPROCESSING –\nSetelah memahami data, akan dilakukan tahap preprocessing untuk menangani masalah pada data yang sudah didefinisikan pada data understanding, yaitu:\n\nMenghapus Missing Value\nMenghapus Data Duplikat\nMenghapus Outlier\nMenyeimbangkan proporsi data tiap target\n\nSetelah data siap, akan dilakukan skoring fitur kembali."
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever."
  }
]